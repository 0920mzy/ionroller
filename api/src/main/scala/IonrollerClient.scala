/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 1.0.1
 * apidoc:0.9.37 http://www.apidoc.me/gilt/ionroller-api/1.0.1/play_2_4_client
 */
package com.gilt.ionroller.api.v1.models {

  /**
   * Elastic Beanstalk configuration including deployment bucket, stack name and
   * option settings
   */
  case class EbConfig(
    deploymentBucket: String,
    stack: _root_.scala.Option[String] = None,
    settings: _root_.scala.Option[Seq[com.gilt.ionroller.api.v1.models.OptionSetting]] = None,
    resources: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    packages: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    sources: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    files: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    users: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    groups: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    commands: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    containerCommands: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None,
    services: _root_.scala.Option[_root_.play.api.libs.json.JsObject] = None
  )

  /**
   * Settings for external ELB
   */
  case class ElbSettings(
    name: String,
    securityGroup: String,
    rolloutDelayMinutes: Int
  )

  /**
   * Elastic Beanstalk Environment running in AWS
   */
  case class Environment(
    release: com.gilt.ionroller.api.v1.models.Release,
    health: String
  )

  /**
   * Elastic Beanstalk configuration option setting
   */
  case class OptionSetting(
    Namespace: String,
    OptionName: String,
    Value: String
  )

  /**
   * Mapping from port in Docker container to external host port
   */
  case class PortMapping(
    internal: Int,
    external: Int
  )

  /**
   * A release of a particular tag of a Docker image
   */
  case class Release(
    image: String,
    tag: String,
    config: _root_.org.joda.time.DateTime,
    rolloutStatus: _root_.scala.Option[com.gilt.ionroller.api.v1.models.RolloutStatus] = None
  )

  /**
   * Current rollout status for release
   */
  case class RolloutStatus(
    numInstances: _root_.scala.Option[Int] = None,
    completedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  case class Service(
    name: String,
    state: com.gilt.ionroller.api.v1.models.ServiceState
  )

  /**
   * Configuration used by a service
   */
  case class ServiceConfig(
    url: String,
    hostedZoneId: String,
    awsAccountId: String,
    externalElb: _root_.scala.Option[com.gilt.ionroller.api.v1.models.ElbSettings] = None,
    serviceRole: String,
    image: String,
    portMappings: Seq[com.gilt.ionroller.api.v1.models.PortMapping],
    volumeMappings: _root_.scala.Option[Seq[com.gilt.ionroller.api.v1.models.VolumeMapping]] = None,
    runArgs: Seq[String],
    eb: com.gilt.ionroller.api.v1.models.EbConfig,
    removeUnusedAfterMinutes: _root_.scala.Option[Long] = None,
    timestamp: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  /**
   * Current state of service environments
   */
  case class ServiceCurrentState(
    environments: Seq[com.gilt.ionroller.api.v1.models.Environment]
  )

  /**
   * Desired future state of service
   */
  case class ServiceDesiredState(
    current: _root_.scala.Option[com.gilt.ionroller.api.v1.models.Release] = None,
    next: _root_.scala.Option[com.gilt.ionroller.api.v1.models.Release] = None,
    future: _root_.scala.Option[com.gilt.ionroller.api.v1.models.Release] = None
  )

  /**
   * State of service environments
   */
  case class ServiceState(
    current: com.gilt.ionroller.api.v1.models.ServiceCurrentState,
    desired: _root_.scala.Option[com.gilt.ionroller.api.v1.models.ServiceDesiredState] = None
  )

  /**
   * Mapping from path inside Docker container to external volume
   */
  case class VolumeMapping(
    internal: String,
    external: String
  )

}

package com.gilt.ionroller.api.v1.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.ionroller.api.v1.models.json._

    private[v1] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v1] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v1] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v1] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsIonrollerAPIEbConfig: play.api.libs.json.Reads[EbConfig] = {
      (
        (__ \ "deployment_bucket").read[String] and
        (__ \ "stack").readNullable[String] and
        (__ \ "settings").readNullable[Seq[com.gilt.ionroller.api.v1.models.OptionSetting]] and
        (__ \ "resources").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "packages").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "sources").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "files").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "users").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "groups").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "commands").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "container_commands").readNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "services").readNullable[_root_.play.api.libs.json.JsObject]
      )(EbConfig.apply _)
    }

    implicit def jsonWritesIonrollerAPIEbConfig: play.api.libs.json.Writes[EbConfig] = {
      (
        (__ \ "deployment_bucket").write[String] and
        (__ \ "stack").writeNullable[String] and
        (__ \ "settings").writeNullable[Seq[com.gilt.ionroller.api.v1.models.OptionSetting]] and
        (__ \ "resources").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "packages").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "sources").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "files").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "users").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "groups").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "commands").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "container_commands").writeNullable[_root_.play.api.libs.json.JsObject] and
        (__ \ "services").writeNullable[_root_.play.api.libs.json.JsObject]
      )(unlift(EbConfig.unapply _))
    }

    implicit def jsonReadsIonrollerAPIElbSettings: play.api.libs.json.Reads[ElbSettings] = {
      (
        (__ \ "name").read[String] and
        (__ \ "security_group").read[String] and
        (__ \ "rollout_delay_minutes").read[Int]
      )(ElbSettings.apply _)
    }

    implicit def jsonWritesIonrollerAPIElbSettings: play.api.libs.json.Writes[ElbSettings] = {
      (
        (__ \ "name").write[String] and
        (__ \ "security_group").write[String] and
        (__ \ "rollout_delay_minutes").write[Int]
      )(unlift(ElbSettings.unapply _))
    }

    implicit def jsonReadsIonrollerAPIEnvironment: play.api.libs.json.Reads[Environment] = {
      (
        (__ \ "release").read[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "health").read[String]
      )(Environment.apply _)
    }

    implicit def jsonWritesIonrollerAPIEnvironment: play.api.libs.json.Writes[Environment] = {
      (
        (__ \ "release").write[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "health").write[String]
      )(unlift(Environment.unapply _))
    }

    implicit def jsonReadsIonrollerAPIOptionSetting: play.api.libs.json.Reads[OptionSetting] = {
      (
        (__ \ "Namespace").read[String] and
        (__ \ "OptionName").read[String] and
        (__ \ "Value").read[String]
      )(OptionSetting.apply _)
    }

    implicit def jsonWritesIonrollerAPIOptionSetting: play.api.libs.json.Writes[OptionSetting] = {
      (
        (__ \ "Namespace").write[String] and
        (__ \ "OptionName").write[String] and
        (__ \ "Value").write[String]
      )(unlift(OptionSetting.unapply _))
    }

    implicit def jsonReadsIonrollerAPIPortMapping: play.api.libs.json.Reads[PortMapping] = {
      (
        (__ \ "internal").read[Int] and
        (__ \ "external").read[Int]
      )(PortMapping.apply _)
    }

    implicit def jsonWritesIonrollerAPIPortMapping: play.api.libs.json.Writes[PortMapping] = {
      (
        (__ \ "internal").write[Int] and
        (__ \ "external").write[Int]
      )(unlift(PortMapping.unapply _))
    }

    implicit def jsonReadsIonrollerAPIRelease: play.api.libs.json.Reads[Release] = {
      (
        (__ \ "image").read[String] and
        (__ \ "tag").read[String] and
        (__ \ "config").read[_root_.org.joda.time.DateTime] and
        (__ \ "rollout_status").readNullable[com.gilt.ionroller.api.v1.models.RolloutStatus]
      )(Release.apply _)
    }

    implicit def jsonWritesIonrollerAPIRelease: play.api.libs.json.Writes[Release] = {
      (
        (__ \ "image").write[String] and
        (__ \ "tag").write[String] and
        (__ \ "config").write[_root_.org.joda.time.DateTime] and
        (__ \ "rollout_status").writeNullable[com.gilt.ionroller.api.v1.models.RolloutStatus]
      )(unlift(Release.unapply _))
    }

    implicit def jsonReadsIonrollerAPIRolloutStatus: play.api.libs.json.Reads[RolloutStatus] = {
      (
        (__ \ "num_instances").readNullable[Int] and
        (__ \ "completed_at").readNullable[_root_.org.joda.time.DateTime]
      )(RolloutStatus.apply _)
    }

    implicit def jsonWritesIonrollerAPIRolloutStatus: play.api.libs.json.Writes[RolloutStatus] = {
      (
        (__ \ "num_instances").writeNullable[Int] and
        (__ \ "completed_at").writeNullable[_root_.org.joda.time.DateTime]
      )(unlift(RolloutStatus.unapply _))
    }

    implicit def jsonReadsIonrollerAPIService: play.api.libs.json.Reads[Service] = {
      (
        (__ \ "name").read[String] and
        (__ \ "state").read[com.gilt.ionroller.api.v1.models.ServiceState]
      )(Service.apply _)
    }

    implicit def jsonWritesIonrollerAPIService: play.api.libs.json.Writes[Service] = {
      (
        (__ \ "name").write[String] and
        (__ \ "state").write[com.gilt.ionroller.api.v1.models.ServiceState]
      )(unlift(Service.unapply _))
    }

    implicit def jsonReadsIonrollerAPIServiceConfig: play.api.libs.json.Reads[ServiceConfig] = {
      (
        (__ \ "url").read[String] and
        (__ \ "hosted_zone_id").read[String] and
        (__ \ "aws_account_id").read[String] and
        (__ \ "external_elb").readNullable[com.gilt.ionroller.api.v1.models.ElbSettings] and
        (__ \ "service_role").read[String] and
        (__ \ "image").read[String] and
        (__ \ "port_mappings").read[Seq[com.gilt.ionroller.api.v1.models.PortMapping]] and
        (__ \ "volume_mappings").readNullable[Seq[com.gilt.ionroller.api.v1.models.VolumeMapping]] and
        (__ \ "run_args").read[Seq[String]] and
        (__ \ "eb").read[com.gilt.ionroller.api.v1.models.EbConfig] and
        (__ \ "remove_unused_after_minutes").readNullable[Long] and
        (__ \ "timestamp").readNullable[_root_.org.joda.time.DateTime]
      )(ServiceConfig.apply _)
    }

    implicit def jsonWritesIonrollerAPIServiceConfig: play.api.libs.json.Writes[ServiceConfig] = {
      (
        (__ \ "url").write[String] and
        (__ \ "hosted_zone_id").write[String] and
        (__ \ "aws_account_id").write[String] and
        (__ \ "external_elb").writeNullable[com.gilt.ionroller.api.v1.models.ElbSettings] and
        (__ \ "service_role").write[String] and
        (__ \ "image").write[String] and
        (__ \ "port_mappings").write[Seq[com.gilt.ionroller.api.v1.models.PortMapping]] and
        (__ \ "volume_mappings").writeNullable[Seq[com.gilt.ionroller.api.v1.models.VolumeMapping]] and
        (__ \ "run_args").write[Seq[String]] and
        (__ \ "eb").write[com.gilt.ionroller.api.v1.models.EbConfig] and
        (__ \ "remove_unused_after_minutes").writeNullable[Long] and
        (__ \ "timestamp").writeNullable[_root_.org.joda.time.DateTime]
      )(unlift(ServiceConfig.unapply _))
    }

    implicit def jsonReadsIonrollerAPIServiceCurrentState: play.api.libs.json.Reads[ServiceCurrentState] = {
      (__ \ "environments").read[Seq[com.gilt.ionroller.api.v1.models.Environment]].map { x => new ServiceCurrentState(environments = x) }
    }

    implicit def jsonWritesIonrollerAPIServiceCurrentState: play.api.libs.json.Writes[ServiceCurrentState] = new play.api.libs.json.Writes[ServiceCurrentState] {
      def writes(x: ServiceCurrentState) = play.api.libs.json.Json.obj(
        "environments" -> play.api.libs.json.Json.toJson(x.environments)
      )
    }

    implicit def jsonReadsIonrollerAPIServiceDesiredState: play.api.libs.json.Reads[ServiceDesiredState] = {
      (
        (__ \ "current").readNullable[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "next").readNullable[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "future").readNullable[com.gilt.ionroller.api.v1.models.Release]
      )(ServiceDesiredState.apply _)
    }

    implicit def jsonWritesIonrollerAPIServiceDesiredState: play.api.libs.json.Writes[ServiceDesiredState] = {
      (
        (__ \ "current").writeNullable[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "next").writeNullable[com.gilt.ionroller.api.v1.models.Release] and
        (__ \ "future").writeNullable[com.gilt.ionroller.api.v1.models.Release]
      )(unlift(ServiceDesiredState.unapply _))
    }

    implicit def jsonReadsIonrollerAPIServiceState: play.api.libs.json.Reads[ServiceState] = {
      (
        (__ \ "current").read[com.gilt.ionroller.api.v1.models.ServiceCurrentState] and
        (__ \ "desired").readNullable[com.gilt.ionroller.api.v1.models.ServiceDesiredState]
      )(ServiceState.apply _)
    }

    implicit def jsonWritesIonrollerAPIServiceState: play.api.libs.json.Writes[ServiceState] = {
      (
        (__ \ "current").write[com.gilt.ionroller.api.v1.models.ServiceCurrentState] and
        (__ \ "desired").writeNullable[com.gilt.ionroller.api.v1.models.ServiceDesiredState]
      )(unlift(ServiceState.unapply _))
    }

    implicit def jsonReadsIonrollerAPIVolumeMapping: play.api.libs.json.Reads[VolumeMapping] = {
      (
        (__ \ "internal").read[String] and
        (__ \ "external").read[String]
      )(VolumeMapping.apply _)
    }

    implicit def jsonWritesIonrollerAPIVolumeMapping: play.api.libs.json.Writes[VolumeMapping] = {
      (
        (__ \ "internal").write[String] and
        (__ \ "external").write[String]
      )(unlift(VolumeMapping.unapply _))
    }
  }
}

package com.gilt.ionroller.api.v1 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.ionroller.api.v1.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package com.gilt.ionroller.api.v1 {

  object Constants {

    val UserAgent = "apidoc:0.9.37 http://www.apidoc.me/gilt/ionroller-api/1.0.1/play_2_4_client"
    val Version = "1.0.1"
    val VersionMajor = 1

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.gilt.ionroller.api.v1.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.gilt.ionroller.api.v1.models.json._

    private[this] val logger = play.api.Logger("com.gilt.ionroller.api.v1.Client")

    logger.info(s"Initializing com.gilt.ionroller.api.v1.Client for url $apiUrl")

    def services: Services = Services

    object Services extends Services {
      override def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.ionroller.api.v1.models.Service]] = {
        _executeRequest("GET", s"/services").map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("Seq[com.gilt.ionroller.api.v1.models.Service]", r, _.validate[Seq[com.gilt.ionroller.api.v1.models.Service]])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByServiceName(
        serviceName: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.Service] = {
        _executeRequest("GET", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("com.gilt.ionroller.api.v1.models.Service", r, _.validate[com.gilt.ionroller.api.v1.models.Service])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def putConfigByServiceName(
        serviceName: String,
        serviceConfig: com.gilt.ionroller.api.v1.models.ServiceConfig
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(serviceConfig)

        _executeRequest("PUT", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/config", body = Some(payload)).map {
          case r if r.status == 204 => ()
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def getConfigsByServiceName(
        serviceName: String,
        from: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        to: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.ionroller.api.v1.models.ServiceConfig]] = {
        val queryParameters = Seq(
          from.map("from" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_)),
          to.map("to" -> _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(_))
        ).flatten

        _executeRequest("GET", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/configs", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("Seq[com.gilt.ionroller.api.v1.models.ServiceConfig]", r, _.validate[Seq[com.gilt.ionroller.api.v1.models.ServiceConfig]])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getConfigByServiceName(
        serviceName: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.ServiceConfig] = {
        _executeRequest("GET", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/config").map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("com.gilt.ionroller.api.v1.models.ServiceConfig", r, _.validate[com.gilt.ionroller.api.v1.models.ServiceConfig])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getConfigsByServiceNameAndTimestamp(
        serviceName: String,
        timestamp: _root_.org.joda.time.DateTime
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.ServiceConfig] = {
        _executeRequest("GET", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/configs/${play.utils.UriEncoding.encodePathSegment(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(timestamp), "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("com.gilt.ionroller.api.v1.models.ServiceConfig", r, _.validate[com.gilt.ionroller.api.v1.models.ServiceConfig])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def deleteConfigByServiceName(
        serviceName: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/config").map {
          case r if r.status == 204 => ()
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def postReleaseByServiceName(
        serviceName: String,
        version: String,
        config: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Long] = {
        val payload = play.api.libs.json.Json.obj(
          "version" -> play.api.libs.json.Json.toJson(version),
          "config" -> play.api.libs.json.Json.toJson(config)
        )

        _executeRequest("POST", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/release", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("Long", r, _.validate[Long])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def postDropByServiceName(
        serviceName: String,
        version: String,
        config: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
        force: Boolean = false
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Long] = {
        val payload = play.api.libs.json.Json.obj(
          "version" -> play.api.libs.json.Json.toJson(version),
          "config" -> play.api.libs.json.Json.toJson(config),
          "force" -> play.api.libs.json.Json.toJson(force)
        )

        _executeRequest("POST", s"/services/${play.utils.UriEncoding.encodePathSegment(serviceName, "UTF-8")}/drop", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.gilt.ionroller.api.v1.Client.parseJson("Long", r, _.validate[Long])
          case r => throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield name -> value
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.gilt.ionroller.api.v1.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Services {
    /**
     * Lists all services
     */
    def get()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.ionroller.api.v1.models.Service]]

    /**
     * Returns service state (current and desired)
     */
    def getByServiceName(
      serviceName: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.Service]

    /**
     * Creates or updates service configuration
     */
    def putConfigByServiceName(
      serviceName: String,
      serviceConfig: com.gilt.ionroller.api.v1.models.ServiceConfig
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Returns service configuration (all versions over time)
     */
    def getConfigsByServiceName(
      serviceName: String,
      from: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      to: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.ionroller.api.v1.models.ServiceConfig]]

    /**
     * Returns latest service configuration
     */
    def getConfigByServiceName(
      serviceName: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.ServiceConfig]

    /**
     * Returns service configuration for specified timestamp
     */
    def getConfigsByServiceNameAndTimestamp(
      serviceName: String,
      timestamp: _root_.org.joda.time.DateTime
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.ionroller.api.v1.models.ServiceConfig]

    /**
     * Removes service configuration (all versions) if no version is currently deployed
     */
    def deleteConfigByServiceName(
      serviceName: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Requests a new release
     */
    def postReleaseByServiceName(
      serviceName: String,
      version: String,
      config: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Long]

    /**
     * Drops a release
     */
    def postDropByServiceName(
      serviceName: String,
      version: String,
      config: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
      force: Boolean = false
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Long]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}
